plugins {
  id 'java'
  id 'application'

  // To create a fat jar build/libs/icalavailable-all.jar, run: ./gradlew shadowJar
  id 'com.github.johnrengelman.shadow' version '6.1.0'

  // Formatting is disabled due to poor handling of type annotations; wait until
  // this issue is fixed: https://github.com/google/google-java-format/issues/5
  // // Code formatting with Google Java Format; defines targets "goJF" and "verJF".
  // id 'com.github.sherter.google-java-format' version '0.7.1'

  // Error Prone linter
  id("net.ltgt.errorprone") version "2.0.1"

  // Checker Framework pluggable type-checking
  id 'org.checkerframework' version '0.5.21'
}

repositories {
  mavenCentral()
  jcenter()
}

dependencies {
  implementation 'org.plumelib:options:1.0.5'

  // https://mvnrepository.com/artifact/org.mnode.ical4j/ical4j
  implementation group: 'org.mnode.ical4j', name: 'ical4j', version: '2.0.0'

  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

application {
  mainClassName = 'org.plumelib.icalavailable.ICalAvailable'
}

test {
  useJUnitPlatform {
    includeEngines 'junit-jupiter'
    excludeEngines 'junit-vintage'
  }
}

/// Error Prone linter

dependencies {
  errorprone("com.google.errorprone:error_prone_core:2.7.1")
  // JDK 8 support for Error Prone:
  errorproneJavac("com.google.errorprone:javac:9+181-r4173-1")
}
tasks.withType(JavaCompile).configureEach {
  options.compilerArgs << "-Xlint:all,-processing" << "-Werror"
  options.errorprone {
    disable("ReferenceEquality") // Use Interning Checker instead.
  }
}

/// Checker Framework pluggable type-checking

apply plugin: 'org.checkerframework'

checkerFramework {
  checkers = [
    'org.checkerframework.checker.formatter.FormatterChecker',
    'org.checkerframework.checker.index.IndexChecker',
    'org.checkerframework.checker.interning.InterningChecker',
    'org.checkerframework.checker.lock.LockChecker',
    'org.checkerframework.checker.nullness.NullnessChecker',
    'org.checkerframework.checker.regex.RegexChecker',
    'org.checkerframework.checker.signature.SignatureChecker',
    'org.checkerframework.common.initializedfields.InitializedFieldsChecker'
  ]
  extraJavacArgs = [
    '-Werror',
    '-AcheckPurityAnnotations',
    '-ArequirePrefixInWarningSuppressions',
    '-AwarnUnneededSuppressions',
  ]
}

// To use a locally-built Checker Framework, run gradle with "-PcfLocal".
if (project.hasProperty("cfLocal")) {
  def cfHome = String.valueOf(System.getenv("CHECKERFRAMEWORK"))
  dependencies {
    compileOnly files(cfHome + "/checker/dist/checker-qual.jar")
    testCompileOnly files(cfHome + "/checker/dist/checker-qual.jar")
    checkerFramework files(cfHome + "/checker/dist/checker.jar")
  }
}

/// Javadoc

// Turn Javadoc warnings into errors.
javadoc {
  options.addStringOption('Xwerror', '-Xdoclint:all')
  options.addStringOption('private', '-quiet')
  if (JavaVersion.current().compareTo(org.gradle.api.JavaVersion.VERSION_1_9) >= 0) {
      options.addStringOption("-release", "8");
  }
  doLast {
    if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
      ant.replaceregexp(match:"@import url\\('resources/fonts/dejavu.css'\\);\\s*", replace:'',
	flags:'g', byline:true) {
	fileset(dir: destinationDir)
      }
    }
  }
}
check.dependsOn javadoc

task javadocWeb(type: Javadoc) {
  description "Upload API documentation to website."
  source = sourceSets.main.allJava
  destinationDir = file("/cse/web/research/plumelib/${project.name}/api")
  classpath = project.sourceSets.main.compileClasspath
  if (JavaVersion.current().compareTo(org.gradle.api.JavaVersion.VERSION_1_9) >= 0) {
      options.addStringOption("-release", "8");
  }
  doLast {
    if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
      ant.replaceregexp(match:"@import url\\('resources/fonts/dejavu.css'\\);\\s*", replace:'',
	flags:'g', byline:true) {
	fileset(dir: destinationDir)
      }
    }
  }
}

configurations {
  requireJavadoc
}
dependencies {
  requireJavadoc "org.plumelib:require-javadoc:1.0.2"
}
task requireJavadoc(type: JavaExec) {
  description = 'Ensures that Javadoc documentation exists.'
  main = "org.plumelib.javadoc.RequireJavadoc"
  classpath = configurations.requireJavadoc
  args "src/main/java"
}
check.dependsOn requireJavadoc
javadocWeb.dependsOn requireJavadoc

task updateUserOptions(type: Javadoc, dependsOn: 'assemble') {
  description "Updates printed documentation of command-line arguments."
  source = sourceSets.main.allJava.files.sort()
  classpath = project.sourceSets.main.compileClasspath
  options.memberLevel = JavadocMemberLevel.PRIVATE
  options.docletpath = project.sourceSets.main.runtimeClasspath as List
  options.doclet = "org.plumelib.options.OptionsDoclet"
  options.addStringOption("docfile", "${projectDir}/src/main/java/org/plumelib/icalavailable/ICalAvailable.java")
  options.addStringOption("format", "javadoc")
  options.addStringOption("i", "-quiet")
  title = ""
}

/// Emacs support

/* Make Emacs TAGS table */
task tags(type: Exec) {
  description "Run etags to create an Emacs TAGS table"
  commandLine "bash", "-c", "find src/ -name '*.java' | sort | xargs etags"
}
